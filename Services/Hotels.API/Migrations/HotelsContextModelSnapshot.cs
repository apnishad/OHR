// <auto-generated />
using System;
using Hotels.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hotels.API.Migrations
{
    [DbContext(typeof(HotelsContext))]
    partial class HotelsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Hotels.API.Models.Facilities", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("ICon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("Hotels.API.Models.HotelAddress", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HotelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelAddress");
                });

            modelBuilder.Entity("Hotels.API.Models.HotelsInfo", b =>
                {
                    b.Property<string>("HotelId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("HotelID");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HotelName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("HotelId");

                    b.ToTable("HotelsInfo");
                });

            modelBuilder.Entity("Hotels.API.Models.Images", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<byte[]>("ImgData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RoomId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RoomID");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Hotels.API.Models.ItemImageRelationships", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ItemID");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ImageID");

                    b.HasKey("ItemId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("ItemImageRelationships");
                });

            modelBuilder.Entity("Hotels.API.Models.RoomFacilitiesRelationships", b =>
                {
                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RoomID");

                    b.Property<string>("FeatureId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FeatureID");

                    b.HasKey("RoomId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("RoomFacilitiesRelationships");
                });

            modelBuilder.Entity("Hotels.API.Models.Rooms", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("HotelID");

                    b.Property<int>("MaximumGuests")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoomLocId")
                        .HasColumnType("int");

                    b.Property<string>("RoomTypeId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RoomTypeID");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomLocId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Hotels.API.Models.RoomTypes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("Hotels.API.Models.HotelAddress", b =>
                {
                    b.HasOne("Hotels.API.Models.HotelsInfo", "Hotel")
                        .WithMany("HotelAddress")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_hoteladdress_hotelinfo");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Hotels.API.Models.Images", b =>
                {
                    b.HasOne("Hotels.API.Models.Rooms", "Room")
                        .WithMany("Images")
                        .HasForeignKey("RoomId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Hotels.API.Models.ItemImageRelationships", b =>
                {
                    b.HasOne("Hotels.API.Models.Images", "Image")
                        .WithMany("ItemImageRelationships")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Hotels.API.Models.RoomFacilitiesRelationships", b =>
                {
                    b.HasOne("Hotels.API.Models.Facilities", "Feature")
                        .WithMany("RoomFacilitiesRelationships")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RoomFeatureRealtionship_Features_RoomID");

                    b.HasOne("Hotels.API.Models.Rooms", "Room")
                        .WithMany("RoomFacilitiesRelationships")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Hotels.API.Models.Rooms", b =>
                {
                    b.HasOne("Hotels.API.Models.HotelsInfo", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("FK_Rooms_Hotels");

                    b.HasOne("Hotels.API.Models.HotelAddress", "RoomLoc")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomLocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotels.API.Models.RoomTypes", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Hotel");

                    b.Navigation("RoomLoc");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Hotels.API.Models.Facilities", b =>
                {
                    b.Navigation("RoomFacilitiesRelationships");
                });

            modelBuilder.Entity("Hotels.API.Models.HotelAddress", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Hotels.API.Models.HotelsInfo", b =>
                {
                    b.Navigation("HotelAddress");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Hotels.API.Models.Images", b =>
                {
                    b.Navigation("ItemImageRelationships");
                });

            modelBuilder.Entity("Hotels.API.Models.Rooms", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("RoomFacilitiesRelationships");
                });

            modelBuilder.Entity("Hotels.API.Models.RoomTypes", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
